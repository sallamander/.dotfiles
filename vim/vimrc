call pathogen#infect()
call pathogen#helptags()
"Since pathogen is installed - see installation part of:
    "http://mirnazim.org/writings/vim-plugins-i-use/
"All I need to do to install a vim plugin is use the command (while in .vim)
    "git submodule add (the github url of the vim plugin) bundle/[repo_name]
        "ex: git submodule add git://github.com/tpope/vim-fugitive.git bundle/fugitive
    "git submodule init && git submodule update
"BOOM! Installed.

let mapleader="\<Space>"

"Add fzf to vim runtimepath
set rtp+=~/.dotfiles/vim/bundle/fzf

"General Settings
set nobackup
set nowritebackup
set noswapfile
set scrolloff=4
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent
set smarttab
set expandtab
set nu
set lbr
set ignorecase
set splitbelow
set cursorline
set smartcase
set hlsearch
set gdefault
set hidden
set backspace=indent,eol,start
set foldmethod=indent
set foldlevel=99
filetype plugin indent on
filetype on
syntax on
colorscheme dracula

"No arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap j gj
nnoremap k gk
inoremap jj <ESC>

"Plugin Settings
    "Buftabline
    let g:buftabline_indicators=1

    "Syntatic
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_enable_signs=1
    let g:syntastic_check_on_open=0
    let g:syntastic_check_on_wq = 0
    let g:syntastic_python_checkers=['pyflakes', 'pep8']
    let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }

"Mappings
    "FZF
    nnoremap <leader>f :FZF<CR>

    "Spell check
    nnoremap <leader>sc :set spell spelllang=en_us<CR>
    nnoremap <leader>so :set nospell<CR>

    "Splits
    nnoremap <leader>sr= :resize +5<CR>
    nnoremap <leader>sr- :resize -5<CR>

    "Productivity
    nnoremap <leader>w :w<CR>
    nnoremap <leader>q :wq<CR>
    nnoremap <leader>fq :q!<CR>
    nnoremap <leader>rp :! python %<CR>
    nnoremap <leader>u <C-r>
    nnoremap <leader>o :noh<CR>

    "Fugitive
    nnoremap <leader>gs :Gstatus<CR>
    nnoremap <leader>gc :Gcommit<CR>
    nnoremap <leader>ga :Gwrite<CR>
    nnoremap <leader>gb :Gblame<CR>
    nnoremap <leader>gd :Gdiff<CR>
    nnoremap <leader>gp :Git push<CR>

    "Clipboard
    nnoremap <leader>y :<C-u>exec 'normal ' . v:count1 . '"+yy'<CR>
    vnoremap <leader>y "+y
    nnoremap <leader>p "+p
    vnoremap <leader>p "+p

    vmap "+y :!xclip -f -sel clip
    map "+p :r!xclip -o -sel clip

    "Syntastic
    nnoremap <leader>l :SyntasticCheck<CR>
    nnoremap <leader>ln :lnext<CR>
    nnoremap <leader>lb :lprevious<CR>

    "UltiSnips

    let g:UltiSnipsExpandTrigger="<leader><tab>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"
    let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
    let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/bundle/custom-snippets']
    let g:ultisnips_python_style="sphinx"

"Bottom bar settings
set noruler
set laststatus=2
set statusline=%<\ %f\ %m%y%=%-35.(Line:\ %l\ of\ %L,\ Col:\ %c%V\ (%P)%)

"Python indenting
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

"JS/HTML/CSS indenting
au BufNewFile,BufRead *.js, *.html, *.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |

"jedi-vim
let g:jedi#use_splits_not_buffers = "bottom"
let g:jedi#popup_on_dot = 0
